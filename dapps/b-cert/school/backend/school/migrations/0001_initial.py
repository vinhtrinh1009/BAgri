# Generated by Django 2.2.24 on 2021-06-14 08:22

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='customUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email address')),
                ('avatar', models.ImageField(default='profile_pics/default.jpg', upload_to='profile_pics/')),
                ('phone', models.CharField(default='', max_length=12)),
                ('address', models.CharField(default='', max_length=60)),
                ('timestamp', models.DateTimeField(blank=True, null=True)),
                ('status', models.BooleanField(default=True)),
                ('public_key', models.CharField(max_length=256)),
                ('is_student', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_professor', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name_plural': 'users',
                'abstract': False,
                'verbose_name': 'user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='University',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('university_name', models.CharField(default='', max_length=256)),
                ('phone', models.CharField(default='', max_length=12)),
                ('address', models.CharField(default='', max_length=200)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email address')),
                ('timestamp', models.DateTimeField(blank=True, null=True)),
                ('public_key', models.CharField(default='', max_length=256)),
                ('status', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Professor',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='school.customUser')),
                ('department', models.CharField(default='', max_length=128, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='school.customUser')),
                ('unit', models.CharField(default='', max_length=128, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=50)),
                ('credits', models.IntegerField(default=0)),
                ('timestamp', models.DateTimeField(blank=True, null=True)),
                ('status', models.BooleanField(default=True)),
                ('university', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subjects', to='school.University')),
            ],
        ),
        migrations.CreateModel(
            name='Class',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(blank=True, null=True)),
                ('semester', models.CharField(default='', max_length=5)),
                ('status', models.BooleanField(default=True)),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classes', to='school.Subject')),
                ('university', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classes', to='school.University')),
                ('professor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classes', to='school.Professor')),
            ],
        ),
        migrations.AddField(
            model_name='customuser',
            name='university',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users', to='school.University'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('middle_score', models.FloatField(default=0)),
                ('final_score', models.FloatField(default=0)),
                ('timestamp', models.DateTimeField(blank=True, null=True)),
                ('status', models.BooleanField(default=True)),
                ('class_detail', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='school.Class')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='school.Student')),
            ],
        ),
        migrations.AddField(
            model_name='class',
            name='students',
            field=models.ManyToManyField(related_name='classes', through='school.Result', to='school.Student'),
        ),
        migrations.CreateModel(
            name='Certificate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(blank=True, null=True)),
                ('cpa', models.FloatField(default=0)),
                ('type', models.CharField(default='', max_length=10)),
                ('status', models.BooleanField(default=True)),
                ('university', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='certificate', to='school.University')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='certificate', to='school.Student')),
            ],
        ),
    ]
