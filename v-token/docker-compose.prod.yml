version: '3.2'

services:
    backend:
        build: 
            context: ./backend
            dockerfile: fabric.dockerfile
        image: vtokens:dev
        command: >
            bash -c "python3 -m gunicorn vtokens.wsgi:application --bind=0.0.0.0:8000 --reload"
        env_file: 
            - ./backend/.prod.env
        volumes:
            - ./backend:/backend
            - "nfsmountCC:/backend/fabric_service/projects"
            - "nfsmountTkMedia:/backend/data/media"
        ports: 
            - 8010:8000
            - 8888:8888
        depends_on:
            # - database
            # - redis
            - worker
            - scheduler
    # database:
    #     image: postgres
    #     environment:
    #         - POSTGRES_DB=
    #         - POSTGRES_USER=
    #         - POSTGRES_PASSWORD=
    #     volumes:
    #         - postgres_data:/var/lib/postgresql/data/
    # redis:
    #     image: redis
    #     volumes:
    #         - redis_data:/data
    worker:
        build: 
            context: ./backend
            dockerfile: dockerfile
        image: vtokens:dev
        volumes:
            - ./backend:/backend
            - "nfsmountCC:/backend/fabric_service/projects"
            - "nfsmountTkMedia:/backend/data/media"
        environment:
            - DEBUG=false
        env_file: 
            - ./backend/.prod.env
        command: celery --app=vtokens worker --autoscale=4,1 -l DEBUG
    scheduler:
        build:
            context: ./backend
            dockerfile: dockerfile
        image: vtokens:dev
        volumes:
            - ./backend:/backend
        environment:
            - DEBUG=false
        env_file:
            - ./backend/.prod.env
        command: celery --app=vtokens beat -l DEBUG
volumes:
  nfsmountCC:
    driver: local
    driver_opts:
      type: nfs
      o: addr=localhost
      device: ":/var/nfs/fabric-service/projects"
  nfsmountTkMedia:
    driver: local
    driver_opts:
      type: nfs
      o: "addr=localhost,nolock"
      device: ":/var/nfs/token-service/data/media"
  # postgres_data:
  # redis_data:
  
