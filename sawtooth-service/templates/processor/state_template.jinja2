from addressing import addresser
{%for entity in data.entities%}
from protobuf import {{entity.name}}_pb2
{%endfor%}

class DappState(object):
    def __init__(self, context, timeout=2):
        self._context = context
        self._timeout = timeout

{%for function in data.functions.create_functions%}
    def {{function.name}}(self,
        timestamp,
        {%for param in function.params%}
        {%if not param.encrypt %}
        {{param.name}}{{ "," if not loop.last }}
        {%endif%}
        {%endfor%}
        {%if function.has_encrypt %}
        , encrypt_data
        {%endif%}
    ):
        {{function.entity_name}}_address = addresser.get_{{function.entity_name}}_address({{function.entity_primary_key}})

        {{function.entity_name}} = {{function.entity_name}}_pb2.{{function.entity_name.capitalize()}}(
            timestamp=timestamp,
            {%for param in function.params%}
                {%if not param.encrypt %}
                {%if param["proto_type"] != 'array'%}
            {{param.proto_name}}={{param.name}}{{ "," if not loop.last }}
                {%else%}
            {{param.proto_name}}={{param.name}}{{ "," if not loop.last }}
                {%endif%}
                {%endif%}
            {%endfor%}
            {%if function.has_encrypt %}
            , encrypt_data = encrypt_data
            {%endif%}
        )
        container = {{function.entity_name}}_pb2.{{function.entity_name.capitalize()}}Container()
        state_entries = self._context.get_state(
            addresses=[{{function.entity_name}}_address], timeout=self._timeout)
        if state_entries:
            container.ParseFromString(state_entries[0].data)

        container.entries.extend([{{function.entity_name}}])
        data = container.SerializeToString()
        updated_state = {}
        updated_state[{{function.entity_name}}_address] = data
        self._context.set_state(updated_state, timeout=self._timeout)

{%endfor%}
{%for function in data.functions.update_functions%}
    def {{function.name}}(self,
        timestamp,
        {%for param in function.params%}
        {%if not param.encrypt %}
        {{param.name}}{{ "," if not loop.last }}
        {%endif%}
        {%endfor%}
        {%if function.has_encrypt %}
        , encrypt_data
        {%endif%}
    ):
        {{function.entity_name}}_address = addresser.get_{{function.entity_name}}_address({{function.entity_primary_key}})

        container = {{function.entity_name}}_pb2.{{function.entity_name.capitalize()}}Container()
        state_entries = self._context.get_state(
            addresses=[{{function.entity_name}}_address], timeout=self._timeout)
        if state_entries:
            container.ParseFromString(state_entries[0].data)
            for {{function.entity_name}} in container.entries:
                if {{function.entity_name}}.{{function.entity_primary_key}} == {{function.entity_primary_key}}:
                    {{function.entity_name}}.timestamp=timestamp
                    {%for param in function.params%}
                        {%if not param.encrypt %}
                        {%if param["proto_type"] != 'array'%}
                    {{function.entity_name}}.{{param.proto_name}}={{param.name}}
                        {%else%}
                    {{function.entity_name}}.{{param.proto_name}}[:]={{param.name}}
                        {%endif%}
                        {%endif%}
                    {%endfor%}
                    {%if function.has_encrypt %}
                    {{function.entity_name}}.encrypt_data = encrypt_data
                    {%endif%}

        data = container.SerializeToString()
        updated_state = {}
        updated_state[{{function.entity_name}}_address] = data
        self._context.set_state(updated_state, timeout=self._timeout)

{%endfor%}
{%for function in data.functions.get_functions%}
    def {{function.name}}(self, {{function.entity_primary_key}}):
        {{function.entity_name}}_address = addresser.get_{{function.entity_name}}_address({{function.entity_primary_key}})

        try:
            state_entries = self._context.get_state(
                addresses=[{{function.entity_name}}_address], timeout=self._timeout)

            if state_entries:
                container = {{function.entity_name}}_pb2.{{function.entity_name.capitalize()}}Container()
                container.ParseFromString(state_entries[0].data)
                for {{function.entity_name}} in container.entries:

                    if {{function.entity_name}}.{{function.entity_primary_key}} == {{function.entity_primary_key}}:
                        return {{function.entity_name}}
        except:
            return None

{%endfor%}