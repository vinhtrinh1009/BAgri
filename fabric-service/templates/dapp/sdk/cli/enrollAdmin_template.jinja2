/** @format */

"use strict";

const FabricCAServices = require("fabric-ca-client");
const { Wallets, X509WalletMixin } = require("fabric-network");
const fs = require("fs");
const path = require("path");
const argv = require("yargs").argv;

/**
 * Create admin for Org
 * @param  {String} org - Org Name
 */

async function main() {
  try {
    let org;
    let username;

    if (!argv.org) {
      throw new Error(`org cannot undefined`);
    } else {
      org = argv.org.toString();
    }

    username = "admin" + org;

    let msp = await changeCaseFirstLetter(org);

    const ccpPath = path.resolve(
      __dirname,
      "..",
      "connection-files",
      `ccp.json`
    );

    const ccpJSON = fs.readFileSync(ccpPath, "utf8");
    const ccp = JSON.parse(ccpJSON);

    // Create a new CA client for interacting with the CA.
    const caInfo = ccp.certificateAuthorities[`ca-org-${org}`];
    const caTLSCACerts = caInfo.tlsCACerts.pem;
    const ca = new FabricCAServices(
      caInfo.url,
      { trustedRoots: caTLSCACerts, verify: false },
      caInfo.caName
    );

    // Create a new file system based wallet for managing identities.
    const walletPath = path.join(process.cwd(), `/wallet/wallet-${org}`);
    const wallet = await Wallets.newFileSystemWallet(walletPath);

    // Check to see if we've already enrolled the admin user.
    let identity = await wallet.get('admin');
    if (identity) {
      console.log('An identity for the admin user "admin" already exists in the wallet');
      return;
    }

    const enrollment = await ca.enroll({
      enrollmentID: "admin",
      enrollmentSecret: "adminpw",
    });

    let x509Identity;
    x509Identity = {
      credentials: {
        certificate: enrollment.certificate,
        privateKey: enrollment.key.toBytes(),
      },
      mspId: msp,
      type: 'X.509',
    };

    await wallet.put('admin', x509Identity);

    console.log('Successfully enrolled admin user "admin" and imported it into the wallet');
    process.exit(0);
  } catch (error) {
    console.error(`Failed to enroll admin: ${error}`);
    process.exit(1);
  }
}

function changeCaseFirstLetter(params) {
  if (typeof params === "string") {
    return params.charAt(0).toUpperCase() + params.slice(1) + "MSP";
  }
  return null;
}

main();
