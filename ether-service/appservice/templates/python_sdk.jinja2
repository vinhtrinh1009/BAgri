import json

from web3 import Web3


class Handler:
    def __init__(self):
        contract_abi_path = './build/{{data.basic_info.dapp_name}}.json'
        self.contract_abi = json.load(open(contract_abi_path, "r"))['abi']
        self.endpoint = 'https://ropsten.infura.io/v3/e7031702228348699215c2d112be103b'
        self.web3 = Web3(Web3.HTTPProvider(self.endpoint))
        self.contract_address = '{{data.contract_address}}'
        self.contract = self.web3.eth.contract(address=self.contract_address, abi=self.contract_abi)
    
    {%for _entity in data.entities%}
    {%for _function in _entity.functions%}
    {%if _function.type != 'GET'%}

    def {{_function.python_name}}(self, {%for _param in _function.params%}{{_param.name}}{{ ", " if not loop.last }}{%endfor%}
        {%for _relationship in _entity.relationship%}, {{_relationship._reference_entity_primary_key}}{%endfor%}, sender_address, sender_private_key):
        nonce = self.web3.eth.getTransactionCount(sender_address)
        success = False
        while not success:
            try:
                tx_dict = self.contract.functions.{{_function.name}}({%for _param in _function.params%}{{_param.name}}{{ ", " if not loop.last }}{%endfor%}
        {%for _relationship in _entity.relationship%}, {{_relationship._reference_entity_primary_key}}{%endfor%})\
                    .buildTransaction({
                        'from': sender_address,
                        'gas': 800000,
                        'gasPrice': self.web3.toWei('200', 'gwei'),
                        'nonce': nonce,
                        'chainId': 3
                    })
                signed_tx = self.web3.eth.account.signTransaction(tx_dict, sender_private_key)
                tx_hash = self.web3.eth.sendRawTransaction(signed_tx.rawTransaction)
                success = True
            except Exception as ex:
                nonce += 1
        return (self.web3.toHex(tx_hash))
    {% else %}

    def {{_function.python_name}}(self, {{_entity.primary_key}}):
        {{_entity.name}}_infor = self.contract.functions.{{_function.name}}({{_entity.primary_key}}).call()
        return {{_entity.name}}_infor
    {%endif%}
    {%endfor%}
    {%endfor%}